https://leetcode.com/playground/DWEjft3o

####################################################################################################################################
704. Binary Search
Input: nums = [-1,0,3,5,9,12], target = 9
Output: 4
Explanation: 9 exists in nums and its index is 4

class Solution {
    public int search(int[] n, int t) {
        int l = 0, r = n.length-1;
        while(l <= r){
            int mid = (l + r)/2;
            if(n[mid] == t){
                return mid;
            }else if(n[mid] > t){
                r = mid - 1;
            }else{
                l = mid + 1;
            }
        }
        return -1;
    }
}

||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        
        int[] arr = new int[n];
        for(int i=0; i<n; i++){
            arr[i] = sc.nextInt();
        }
        int t = sc.nextInt();
        
       int l = 0, r = n-1;
        while(l <= r){
            int mid = (l + r)/2;
            if(arr[mid] == t){
                System.out.print(mid);
                return;
            }else if(arr[mid] > t){
                r = mid - 1;
            }else{
                l = mid + 1;
            }
        }
        System.out.print(-1);


####################################################################################################################################
Find Transition Point

N = 5
arr[] = {0,0,0,1,1}
Output: 3
Explanation: index 3 is the transition 
point where 1 begins and if there is no "1",
the answer is -1.


class GfG {
    int transitionPoint(int arr[], int n) {
        // code here
        int l=0, r=n-1;
        int ans = -1;
        while(l <= r){
            int m = l + (r-l)/2;
            if(arr[m] == 0){
                l = m+1;
            }else{
                ans = m;
                r = m-1;
            }
        }
        return ans;
    }
}



####################################################################################################################################
374. Guess Number Higher or Lower

Input: n = 10, pick = 6
Output: 6

public int guessNumber(int n) {
    int l = 0, r = n;
    while(l<=r){
        int m = l+(r-l)/2;
        
        int ans = guess(m);
        if(ans == 0) return m;
        else if(ans == -1) r = m - 1;
        else l = m + 1;
    }
    return -1;
}

####################################################################################################################################
34. Find First and Last Position of Element in Sorted Array

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

public int[] searchRange(int[] nums, int t) {
    int[] ans = new int[2];
     ans[0] = ans[1] = -1;
     
     int l = 0, r = nums.length-1;
     while(l<=r){
         int m = l+(r-l)/2;
         if(nums[m] == t)
             {ans[0] = m;
         r = m-1;}
         else if(nums[m] > t)
             {r = m-1;}
         else {l = m+1;}
     }
     l = 0; r = nums.length-1;
     while(l<=r){
         int m = l+(r-l)/2;
         if(nums[m] == t)
             {ans[1] = m;
         l = m+1;}
         else if(nums[m] > t)
             {r = m-1;}
         else {l = m+1;}
 }
     return ans;
 }

####################################################################################################################################
852. Peak Index in a Mountain Array

Input: arr = [0,10,5,2]
Output: 1

int l =0,r = arr.length-1;
        while(l<r){
            int m = l+(r-l)/2;
            if(arr[m]<arr[m+1]){
                l = m+1;
            }else{
                r = m;
            }
        }
        return r;
-------------------------------------------------------------------------------------------------------------------------
if(nums[mid] > nums[mid - 1] && nums[mid] > nums[mid + 1]){
    // Peak Element 
    return mid;
}

else if(nums[mid] < nums[mid + 1]){
    // Uphill
    left = mid + 1;
} else {
    // Downhill
    right = mid - 1;
}
}

return 0;

####################################################################################################################################
69. Sqrt(x)

Input: x = 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.

if(x == 0) return 0;
        int l = 1, r = x, ans = 0;
        while(l<=r){
            int m = l + (r-l)/2;
                if(m <= x/m){
                    ans = m;
                    l = m+1;
                }else{
                    r = m-1;
                }
        }
        return ans;

####################################################################################################################################
367. Valid Perfect Square

Input: num = 16
Output: true

public boolean isPerfectSquare(int num) {
    int l=0, h=num;
    while(l<=h){
        long m = l+(h-l)/2;
        if(m*m > num){
            h = (int)m-1;
        }else{
            l = (int)m+1;
        }
    }
    return h*h == num;
}

####################################################################################################################################


####################################################################################################################################


####################################################################################################################################



####################################################################################################################################


####################################################################################################################################


####################################################################################################################################


####################################################################################################################################


####################################################################################################################################


####################################################################################################################################



####################################################################################################################################


####################################################################################################################################


